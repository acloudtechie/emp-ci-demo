/* TT - Tooltip - Utility
 * ZRM 
 * This library is used to put Tooltips on an entellitrak form. 
 * It has the ability to do "smart" tooltips by automatically finding all form elements and using the tooltip field if specified or the data element description if the element doesn't have a tooltip.
 * The library will also detect whether the user has accessibility mode turned on and will implement tooltips differently. */

"use strict";

var Tooltip = (function(jQuery) {

    /* This is the default configuration. 
     * instances of tooltips will be generated by extending this configuration and merging them with specific user-defined configurations.
     * Data will be a place to store things like accessibility mode. */
    var defaultConfig = {
        data: {},
        generateElement: generateElement,
        applyTooltip: applyTooltip,
        addSmartTips: addSmartTips,
        tooltip: tooltip,
        addEtkTooltip: addEtkTooltip,
        removeEtkTooltip: removeEtkTooltip
    };

    /* This one is just a convenience function because it's so common */
    function tooltip(content) {
        return this.applyTooltip(this.generateElement(), content)
    }

    /* This function will initialize the data object for the config. It returns a Promise which will be resolved with the config once the data has been set.
     * I have broken this out into a separate function from create because I think that at some point I would like to try to make the initializeData function part of the config. */
    function initializeData(config) {
        /*Make our Deferred*/
        var deferred = jQuery.Deferred();

        jQuery.when(
            /* We get the Form Control Data */
            jQuery.post('page.request.do?page=tt.ajax.getFormControlData', {
                    dataFormKey: jQuery('input[name=dataFormKey]').val()
                },
                function(response) {
                    config.data.formControls = response;
                }),
            /* We get Accessibility */
            jQuery.post('page.request.do?page=tt.ajax.getAccessible', {},
                function(response) {
                    config.data.accessible = response;
                })
        ).done(function(formControls, accessible) {
            /*Now that data has been set, we can finally resolve the promise with the config*/
            deferred.resolve(config);
        })

        /* We return the promise. */
        return deferred.promise();
    }

    /* All Tooltip instances will be created here. We extend the defaults and merge in user configurations.
     * We return a jQuery Deferred because setting up configuration requires Ajax calls to get some data. The Deferred object will resolve to an object which looks like the defaultConfig */
    function create(configuration) {
        var config = jQuery.extend({}, defaultConfig, configuration)
        return initializeData(config);
    }

    /* This function will add a tooltip to every form control which has a tooltip or data element description */
    function addSmartTips(params) {

        var config = this;

        var defaultParams = {
            include: null,
            exclude: null,
            useDataElementDescription: true
        }

        params = jQuery.extend(defaultParams, params)

        function exclude(name) {
            return (params.include && -1 == jQuery.inArray(name, params.include)) || (params.exclude && 0 <= jQuery.inArray(name, params.exclude));
        }

        var formControls = (params.useDataElementDescription === true ? jQuery(this.data.formControls) : jQuery(this.data.formControls).filter(function(i, formControl) {
                return formControl.TOOLTIPTEXT
            }))
            .map(function(i, formControl) {
                return {
                    name: formControl.NAME,
                    text: formControl.TOOLTIPTEXT || formControl.DESCRIPTION
                }
            })

        jQuery(formControls).each(function(i, formControl) {
            if (formControl.text && !exclude(formControl.name)) {
                config.addEtkTooltip(formControl.name, formControl.text)
            }
        })
    }

    /* This function is specifically used for adding tooltips after entellitrak labels. It relies on the known label names, and removes core's tooltips since they interfere. */
    function addEtkTooltip(name, content) {
        var element = this.generateElement();
        this.applyTooltip(element, content);
        this.removeEtkTooltip(name)
        jQuery('form[name=dataForm] label[for=' + name + '], label#' + name).append(element)
    }

    /* This removes the tooltip that entellitrak adds by default */
    function removeEtkTooltip(name) {
        jQuery('tr#' + name + '-container').prop({
            title: ''
        })
    }

    /* This binds the content to element as a tooltip. 
     * For accessible users it uses the title attribute. For non-accessible users it uses the qtip library */
    function applyTooltip(element, content) {
        element = jQuery(element)
        if (this.data.accessible) {
            element.prop({
                title: content
            })
        } else {
            element.qtip({
                content: content
            })
        }
        return element;
    }

    /* Returns a simple element which looks like it should have a tooltip */
    function generateElement() {
        return jQuery('<a/>')
            .addClass('aea-tt-icon')
            .text(' [?]')
    }

    return {
        create: create
    }
}(jQuery))

/************ SAMPLE USAGES *******************
    
    AeaFormUtilitiesJavascriptLibrary.addMultiloadEvent(applyTooltips);
    
    function applyTooltips() {
        
        Tooltip.create()    // This initialized a new tooltip. You'll only want to call this once because it makes AJAX calls and is therefore slow
            .done(function(tooltip){    // It returns a jQuery promise so you use .done to specify what should be done once the AJAX calls are completed
                tooltip.addSmartTips();     // smartTips adds a tooltip to every formElement
                jQuery('#saveButton').parent().append(tooltip.tooltip('WHOA'))  // .tooltip creates an element and adds a tooltip to it. It's up to you to add it to the DOM
            })
        
        
        var tooltip = Tooltip.create({  //create takes a map of options of functions to override.
            generateElement : function() { //When we override a function, "this" refers to the context map
                return this.data.accessible ? jQuery('<a/>').text('[ouch]') : jQuery('<a/>').text('[fine]')
            }
        })
        
        // Since we have given the Promise a name, we can call .done from different places in our code without having to initialize it again
        tooltip.done(function(tooltip) {
            tooltip.addSmartTips()
        })
        tooltip.done(function(tooltip) {
            jQuery('#saveButton').parent().append(tooltip.tooltip('HEHE'))
        })
        
        
        var tooltip2 = Tooltip.create({
            applyTooltip: function(element, content){
                return element.tooltip({content: content+"!!"})
            }
        })
        tooltip2.done(function(tooltip) {
            tooltip.addSmartTips()
        })
        tooltip2.done(function(tooltip) {
            jQuery('#saveButton').parent().append(tooltip.tooltip('HEHE'))
        })
    }
*/
